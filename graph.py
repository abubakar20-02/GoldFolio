# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'graph.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import datetime
import matplotlib
from PyQt5.QtCore import QObject

matplotlib.use('Qt5Agg')

from PyQt5 import QtCore, QtWidgets
from datetime import datetime

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.dates as mdates
from matplotlib.figure import Figure


def strToDate(date_string):
    # date_string = "2022-03-05"
    date_format = "%Y-%m-%d"
    date_object = datetime.strptime(date_string, date_format)
    return date_object


class MplCanvas(FigureCanvas):

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(MplCanvas, self).__init__(fig)


class Ui_MainWindow(QObject):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(520, 649)
        self.main = QtWidgets.QWidget(MainWindow)
        self.main.setObjectName("main")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.main)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.SeeBy = QtWidgets.QVBoxLayout()
        self.SeeBy.setObjectName("SeeBy")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.main)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.comboBox = QtWidgets.QComboBox(self.main)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.currentIndexChanged.connect(self.changegraph)
        self.horizontalLayout.addWidget(self.comboBox)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.SeeBy.addLayout(self.horizontalLayout)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.canvas = MplCanvas(self, width=5, height=4, dpi=100)
        self.canvas.setMinimumSize(QtCore.QSize(500, 500))
        self.canvas.setObjectName("canvas")
        self.verticalLayout.addWidget(self.canvas)
        self.line()
        self.SeeBy.addLayout(self.verticalLayout)
        self.BottomLayout = QtWidgets.QVBoxLayout()
        self.BottomLayout.setObjectName("BottomLayout")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        # self.label_2 = QtWidgets.QLabel(self.main)
        # self.label_2.setObjectName("label_2")
        # self.horizontalLayout_2.addWidget(self.label_2)
        # self.comboBox_2 = QtWidgets.QComboBox(self.main)
        # self.comboBox_2.setObjectName("comboBox_2")
        # self.horizontalLayout_2.addWidget(self.comboBox_2)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.BottomLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.main)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        self.comboBox_3 = QtWidgets.QComboBox(self.main)
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.currentIndexChanged.connect(self.changegraph)
        self.horizontalLayout_3.addWidget(self.comboBox_3)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        self.BottomLayout.addLayout(self.horizontalLayout_3)
        self.SeeBy.addLayout(self.BottomLayout)
        self.verticalLayout_3.addLayout(self.SeeBy)
        MainWindow.setCentralWidget(self.main)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 520, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "See by: "))
        self.comboBox.setItemText(0, _translate("MainWindow", "Month"))
        self.comboBox.setItemText(1, _translate("MainWindow", "2 Weeks"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Week"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Year"))
        self.comboBox.setItemText(4, _translate("MainWindow", "5 Years"))
        self.comboBox_3.setItemText(0, _translate("MainWindow", "Gold"))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "Bough For"))
        # self.label_2.setText(_translate("MainWindow", "X axis:"))
        self.label_3.setText(_translate("MainWindow", "Y axis:"))

    def changegraph(self):
        if self.comboBox.currentIndex() == 0:
            Mode = "Month"
        if self.comboBox.currentIndex() == 1:
            Mode = "2Week"
        if self.comboBox.currentIndex() == 2:
            Mode = "Week"
        if self.comboBox.currentIndex() == 3:
            Mode = "Year"
        if self.comboBox.currentIndex() == 4:
            Mode = "5Years"
        if self.comboBox_3.currentIndex() == 0:
            ValueSelect = "Gold"
        if self.comboBox_3.currentIndex() == 1:
            ValueSelect = "BoughtFor"
        self.line(Mode=Mode, ValueSelect=ValueSelect)

    def line(self, Mode="Month", ValueSelect="Gold"):
        self.canvas.axes.clear()
        # self.canvas.axes.xaxis.set_major_locator(MaxNLocator(nbins=5))
        # self.canvas.axes.xaxis.set_major_locator(FixedLocator([15500, 16500, 17500, 18500, 19500]))
        from Database.Statement import Statement
        Statement = Statement()

        # self.cursor = mplcursors.cursor(self.canvas.axes, hover=True)
        # self.cursor.connect("add", lambda sel: sel.annotation.set_text(
        #     f"{sel.artist.get_xdata()[sel.target.index]:.2f}, {sel.artist.get_ydata()[sel.target.index]:.2f}"))
        if Mode == "Year":
            print(datetime.now().year)
            data = Statement.trial(ValueSelect, Start=datetime(datetime.now().year, 1, 1), End=datetime(datetime.now().year, 12, 31))
            print("year")
        if Mode == "5Years":
            data = Statement.trial1(ValueSelect, Start=datetime(datetime.now().year-5, 1, 1), End=datetime(datetime.now().year, 12, 31))
        if Mode in ("Week", "2Week", "Month"):
            data = Statement.traverse_all_dates(ValueSelect, Preset=Mode, Mode=1)
        x = list(data.keys())
        # xv = range(0,len(x))
        y = list(data.values())
        print(x)
        print(y)
        ########################
        #
        # Define the format of the date string
        # format_str = '%Y-%m-%d'
        # # Convert each dictionary key to a datetime object
        # for key in data:
        #     datetime_obj = datetime.datetime.strptime(key, format_str)
        #     data[datetime_obj] = data.pop(key)
        # print(data)
        # x = [datetime.datetime(2022, 1, 1, 0, 0),
        #      datetime.datetime(2022, 1, 2, 0, 0),
        #      datetime.datetime(2022, 1, 3, 0, 0),
        #      datetime.datetime(2022, 1, 4, 0, 0),
        #      datetime.datetime(2022, 1, 5, 0, 0)]
        if Mode in ("Week", "2Week", "Month"):
            self.canvas.axes.set_xticks(x)
            self.canvas.axes.set_xticklabels(x, rotation=45)
            # x = [1, 2, 3, 4, 5]
            # y = [1850, 1800, 1900, 1950, 1750]
        self.canvas.axes.plot(x, y, '-o')
        self.canvas.axes.grid(True)
        self.canvas.axes.set_xlabel('Date')
        self.canvas.axes.set_ylabel(ValueSelect)

        # # Format the x-axis ticks as dates
        if Mode in ("Week", "2Week", "Month"):
            date_format = mdates.DateFormatter('%Y-%m-%d')
            self.canvas.axes.xaxis.set_major_formatter(date_format)
            self.canvas.axes.xaxis.set_major_locator(mdates.DayLocator())
        self.canvas.draw()


class MyWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
