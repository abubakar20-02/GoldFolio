# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'StatementScreen.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import pickle

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QTableWidgetItem, QHeaderView
from Database import Statement


class Ui_MainWindow(QObject):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(518, 569)
        self.Statement = Statement.Statement()
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.StartDateText = QtWidgets.QLabel(self.centralwidget)
        self.StartDateText.setObjectName("StartDateText")
        self.horizontalLayout_2.addWidget(self.StartDateText)
        self.StartDate = QtWidgets.QDateEdit(calendarPopup=True)
        self.StartDate.setDateTime(QtCore.QDateTime.currentDateTime())
        self.StartDate.setObjectName("StartDate")
        self.horizontalLayout_2.addWidget(self.StartDate)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.horizontalLayout_3.addLayout(self.horizontalLayout_2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.EndDateText = QtWidgets.QLabel(self.centralwidget)
        self.EndDateText.setObjectName("EndDateText")
        self.horizontalLayout.addWidget(self.EndDateText)
        self.EndDate = QtWidgets.QDateEdit(calendarPopup=True)
        self.EndDate.setDateTime(QtCore.QDateTime.currentDateTime())
        self.EndDate.setObjectName("EndDate")
        self.horizontalLayout.addWidget(self.EndDate)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.horizontalLayout_3.addLayout(self.horizontalLayout)
        self.SearchButton = QtWidgets.QPushButton(self.centralwidget)
        self.SearchButton.setObjectName("SearchButton")
        self.horizontalLayout_3.addWidget(self.SearchButton)
        self.SearchButton.clicked.connect(self.Search)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.verticalLayout.addWidget(self.tableWidget)
        self.loadDataFromTable()
        self.tableWidget.setColumnHidden(0, True)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def Search(self):
        StartDate = self.StartDate.date().toPyDate()
        EndDate = self.EndDate.date().toPyDate()

        self.loadDataFromTable(StartDate=StartDate, EndDate=EndDate)

        print(type(self.StartDate.date().getDate()))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.StartDateText.setText(_translate("MainWindow", "Start date:"))
        self.EndDateText.setText(_translate("MainWindow", "End date:"))
        self.SearchButton.setText(_translate("MainWindow", "Search"))

    def loadDataFromTable(self, StartDate=None, EndDate=None):
        with open("my_variable.pickle", "rb") as f:
            UserID = pickle.load(f)
        self.Statement.setProfile(UserID)
        self.load_dataframe_to_table(self.Statement.getTable(StartDate=StartDate, EndDate=EndDate), self.tableWidget)

    def load_dataframe_to_table(self, dataframe, table_widget):
        # Set the number of rows and columns for the table
        table_widget.setRowCount(len(dataframe))
        table_widget.setColumnCount(len(dataframe.columns))

        # Add the headers for the table columns
        table_widget.setHorizontalHeaderLabels(dataframe.columns)

        # Populate the table with data
        for row in range(len(dataframe)):
            for column in range(len(dataframe.columns)):
                item = QTableWidgetItem(str(dataframe.iloc[row, column]))
                # Set the color based on the value
                if column == len(dataframe.columns) - 1:
                    if dataframe.iloc[row, column] == 0:
                        item.setForeground(QColor('black'))
                    if dataframe.iloc[row, column] > 0:
                        item.setForeground(QColor('green'))
                    if dataframe.iloc[row, column] < 0:
                        item.setForeground(QColor('red'))
                table_widget.setItem(row, column, item)


class MyWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
